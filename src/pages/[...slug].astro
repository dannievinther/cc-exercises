---
import { getCollection } from "astro:content";
import Exercises from "../components/Exercises.astro";
import Base from "../layouts/Base.astro";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const [grid, flexbox, subgrid] = await Promise.all([
    getCollection("grid"),
    getCollection("flexbox"),
    getCollection("subgrid"),
  ]);

  const allCollections = [...grid, ...flexbox, ...subgrid];

  return allCollections.map((entry, index) => ({
    params: { slug: slug(entry) },
    props: {
      entry,
      index: getIndex(entry, index),
      total: getTotal(entry, grid, flexbox, subgrid),
      theme: getTheme(entry.collection),
      slugs: getCollectionSlugs(entry.collection),
    },
  }));

  function getCollectionSlugs(collection) {
    return allCollections
      .filter((item) => item.collection === collection)
      .map((item) => item.slug);
  }

  function getIndex(entry, index) {
    const collection = entry.collection;
    const collectionEntries = allCollections.filter(
      (item) => item.collection === collection
    );
    const sortedEntries = collectionEntries.sort((a, b) =>
      a.slug.localeCompare(b.slug, undefined, { numeric: true })
    );
    const entryIndex = sortedEntries.findIndex(
      (item) => item.slug === entry.slug
    );
    return entryIndex + 1;
  }

  function getTotal(entry, grid, flexbox, subgrid) {
    const collection = entry.collection;
    const collectionMap = {
      grid: grid.length,
      flexbox: flexbox.length,
      subgrid: subgrid.length,
    };

    return collectionMap[collection] || 0;
  }

  function getTheme(collection) {
    const themeMap = {
      grid: "green",
      flexbox: "purple",
      subgrid: "indigo",
    };

    return themeMap[collection];
  }

  function slug(entry) {
    if (entry.collection === "flexbox") {
      return `flex/${entry.slug.replace(/^0+/, "")}`;
    } else {
      return `${entry.collection}/${entry.slug.replace(/^0+/, "")}`;
    }
  }
}

const { slug } = Astro.params;
const { entry, total, index, theme, slugs } = Astro.props;
const title =
  entry.collection.charAt(0).toUpperCase() + entry.collection.slice(1);
// Render a link to the next exercise based on the current index of the slugs array
const nextLink = (entry, total) => {
  const currentIndex = slugs.indexOf(entry.slug);
  const nextIndex = currentIndex + 1;
  if (nextIndex < total) {
    return slugs[nextIndex].replace(/^0+/, "");
  } else {
    return "/";
  }
};
const prevLink = (entry) => {
  const currentIndex = slugs.indexOf(entry.slug);
  const prevIndex = currentIndex - 1;
  if (prevIndex >= 0) {
    return slugs[prevIndex].replace(/^0+/, "");
  } else {
    return null;
  }
};
---

<Base title={title} theme={theme}>
  <Exercises {entry} enableExtra={false} index={index} total={total} />
  <div class="navigation">
    {
      prevLink(entry) && (
        <a href={prevLink(entry)} class="prev">
          <Icon width={16} height={16} stroke-width={3} name="chevron-left" />
          <span>Forrige øvelse</span>
        </a>
      )
    }
    {
      index < total && (
        <a href={nextLink(entry, total)} class="next">
          <span>Næste øvelse</span>
          <Icon width={16} height={16} stroke-width={3} name="chevron-right" />
        </a>
      )
    }
  </div>
</Base>

<style>
  .navigation {
    grid-column: 2;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-self: center;
    a {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: var(--space-4) var(--space-6);
      color: var(--blue-900);
      border-radius: var(--bdrs-md);
      transition: 0.1s linear;
      text-decoration: none;
      text-transform: uppercase;
      font-variation-settings: "wdth" 120;
      font-family:
        Mona Sans,
        system-ui;
      font-size: 0.75rem;
      font-weight: 700;
      letter-spacing: 0.075em;

      box-shadow:
        #fff 0 0,
        #3341551a 0 0 0 1px,
        #0000000d 0 20px 25px -5px,
        #0000000d 0 8px 10px -6px;
      background:
        linear-gradient(#fff, #f3f4f6) 0% 100% / 100% 2rem no-repeat padding-box,
        #fff;
      border: 1px solid transparent;

      &.prev {
        --offset: 0.2rem;
        padding-inline-start: var(--space-5);
      }
      &.next {
        --offset: -0.2rem;
        padding-inline-end: var(--space-5);
      }

      [data-icon] {
        color: var(--chevron-color, var(--blue-muted));
        translate: var(--_offset, var(--offset)) -1px;
        transition: 0.2s;
      }

      &:hover {
        --_offset: 0;
        --chevron-color: var(--gray-1000);
        border-color: var(--blue-700);
      }
    }
  }
</style>
